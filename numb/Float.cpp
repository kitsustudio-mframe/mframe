/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ****************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------
#include "Float.h"

//-----------------------------------------------------------------------------
#include "mframe/lang/Maths.h"

/* ****************************************************************************
 * Using
 */

//-----------------------------------------------------------------------------
using mframe::numb::Float;

//-----------------------------------------------------------------------------
using mframe::lang::Maths;

/* ****************************************************************************
 * Abstract Method
 */

/* ****************************************************************************
 * Construct Method
 */

//-----------------------------------------------------------------------------
Float::Float(void) {
  return;
}

//-----------------------------------------------------------------------------
Float::Float(float value) {
  this->mValue.f32 = value;
  return;
}

//-----------------------------------------------------------------------------
Float::~Float(void) {
  return;
}

/* ****************************************************************************
 * Operator Method
 */
//-----------------------------------------------------------------------------
inline bool Float::operator==(float v) {
  return (Maths::fabsf(this->mValue.f32 - v) < Float::EQUAL_EPSILIN);
}

//-----------------------------------------------------------------------------
inline bool Float::operator==(Float& v) {
  return (Maths::fabsf(this->mValue.f32 - v.mValue.f32) < Float::EQUAL_EPSILIN);
}

/* ****************************************************************************
 * Public Method <Override>
 */

/* ****************************************************************************
 * Public Method
 */

/* ****************************************************************************
 * Protected Method
 */

/* ****************************************************************************
 * Private Method
 */

/* ****************************************************************************
 * Static Variable
 */
const int Float::SIZE = sizeof(float);
const float Float::EQUAL_EPSILIN = 1e-6f;
/* ****************************************************************************
 * Static Method
 */

/* ****************************************************************************
 * End of file
 */
