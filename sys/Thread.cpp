/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ****************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------
#include "mframe/sys/Thread.h"

//-----------------------------------------------------------------------------

/* ****************************************************************************
 * Macro
 */

/* ****************************************************************************
 * Using
 */

//-----------------------------------------------------------------------------
using mframe::sys::Thread;

//-----------------------------------------------------------------------------

/* ****************************************************************************
 * Construct Method
 */

//-----------------------------------------------------------------------------
Thread::Thread(void) {
  return;
}

//-----------------------------------------------------------------------------
Thread::~Thread(void) {
  return;
}

/* ****************************************************************************
 * Operator Method
 */

/* ****************************************************************************
 * Public Method <Override>
 */

/* ****************************************************************************
 * Public Method
 */

//-----------------------------------------------------------------------------
bool Thread::start(const char* name) {
  return this->start(name, mframe::sys::ThreadPriority::NORMAL);
}

//-----------------------------------------------------------------------------
bool Thread::isActive(void) {
  mframe::sys::ThreadState state = this->getState();

  switch (state) {
    case mframe::sys::ThreadState::INACTIVE:
    case mframe::sys::ThreadState::ERROR:
      return false;

    case mframe::sys::ThreadState::BLOCKED:
    case mframe::sys::ThreadState::READY:
    case mframe::sys::ThreadState::RUNNING:
    case mframe::sys::ThreadState::TERMINATED:
      return true;
  }
}

/* ****************************************************************************
 * Protected Method
 */

/* ****************************************************************************
 * Private Method
 */

/* ****************************************************************************
 * Static Variable
 */

/* ****************************************************************************
 * Static Method
 */

/* ****************************************************************************
 * End of file
 */
